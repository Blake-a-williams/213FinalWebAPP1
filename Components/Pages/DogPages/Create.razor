@page "/dogs/create"
@using Microsoft.EntityFrameworkCore
@using Blazor213FinalWebAPP.Models
@inject IDbContextFactory<_213FinalWebAPP.Data._213FinalWebAPPContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Dog</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Dog" OnValidSubmit="AddDog" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="images" class="form-label">Images:</label>
                <InputText id="images" @bind-Value="Dog.Images" class="form-control" />
                <ValidationMessage For="() => Dog.Images" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="name" class="form-label">Name:</label> 
                <InputText id="name" @bind-Value="Dog.Name" class="form-control" /> 
                <ValidationMessage For="() => Dog.Name" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="breed" class="form-label">Breed:</label> 
                <InputText id="breed" @bind-Value="Dog.Breed" class="form-control" /> 
                <ValidationMessage For="() => Dog.Breed" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="size" class="form-label">Size:</label> 
                <InputText id="size" @bind-Value="Dog.Size" class="form-control" /> 
                <ValidationMessage For="() => Dog.Size" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="age" class="form-label">Age:</label> 
                <InputText id="age" @bind-Value="Dog.Age" class="form-control" /> 
                <ValidationMessage For="() => Dog.Age" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="description" class="form-label">Description:</label> 
                <InputText id="description" @bind-Value="Dog.Description" class="form-control" /> 
                <ValidationMessage For="() => Dog.Description" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="other" class="form-label">Other:</label> 
                <InputText id="other" @bind-Value="Dog.Other" class="form-control" /> 
                <ValidationMessage For="() => Dog.Other" class="text-danger" /> 
            </div>               
            <div class="mb-3">
                <label for="gender" class="form-label">Gender:</label> 
                <InputText id="gender" @bind-Value="Dog.Gender" class="form-control" /> 
                <ValidationMessage For="() => Dog.Gender" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="temperament" class="form-label">Temperament:</label> 
                <InputText id="temperament" @bind-Value="Dog.Temperament" class="form-control" /> 
                <ValidationMessage For="() => Dog.Temperament" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/dogs">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Dog Dog { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddDog()
    {
        using var context = DbFactory.CreateDbContext();
        context.Dog.Add(Dog);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/dogs");
    }
}
