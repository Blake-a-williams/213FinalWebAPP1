@page "/adoptionapplications/edit"
@using Microsoft.EntityFrameworkCore
@using Blazor213FinalWebAPP.Models
@inject IDbContextFactory<_213FinalWebAPP.Data._213FinalWebAPPContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>AdoptionApplication</h2>
<hr />
@if (AdoptionApplication is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="AdoptionApplication" OnValidSubmit="UpdateAdoptionApplication" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="AdoptionApplication.Id" value="@AdoptionApplication.Id" />
                <div class="mb-3">
                    <label for="dogid" class="form-label">DogId:</label>
                    <InputNumber id="dogid" @bind-Value="AdoptionApplication.DogId" class="form-control" />
                    <ValidationMessage For="() => AdoptionApplication.DogId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="userid" class="form-label">UserId:</label>
                    <InputNumber id="userid" @bind-Value="AdoptionApplication.UserId" class="form-control" />
                    <ValidationMessage For="() => AdoptionApplication.UserId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="fullname" class="form-label">FullName:</label>
                    <InputText id="fullname" @bind-Value="AdoptionApplication.FullName" class="form-control" />
                    <ValidationMessage For="() => AdoptionApplication.FullName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="email" class="form-label">Email:</label>
                    <InputText id="email" @bind-Value="AdoptionApplication.Email" class="form-control" />
                    <ValidationMessage For="() => AdoptionApplication.Email" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="phone" class="form-label">Phone:</label>
                    <InputText id="phone" @bind-Value="AdoptionApplication.Phone" class="form-control" />
                    <ValidationMessage For="() => AdoptionApplication.Phone" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="address" class="form-label">Address:</label>
                    <InputText id="address" @bind-Value="AdoptionApplication.Address" class="form-control" />
                    <ValidationMessage For="() => AdoptionApplication.Address" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="reasonforadoption" class="form-label">ReasonForAdoption:</label>
                    <InputText id="reasonforadoption" @bind-Value="AdoptionApplication.ReasonForAdoption" class="form-control" />
                    <ValidationMessage For="() => AdoptionApplication.ReasonForAdoption" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="submissiondate" class="form-label">SubmissionDate:</label>
                    <InputDate id="submissiondate" @bind-Value="AdoptionApplication.SubmissionDate" class="form-control" />
                    <ValidationMessage For="() => AdoptionApplication.SubmissionDate" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/adoptionapplications">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private AdoptionApplication? AdoptionApplication { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        AdoptionApplication ??= await context.AdoptionApplication.FirstOrDefaultAsync(m => m.Id == Id);

        if (AdoptionApplication is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateAdoptionApplication()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(AdoptionApplication!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!AdoptionApplicationExists(AdoptionApplication!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/adoptionapplications");
    }

    private bool AdoptionApplicationExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.AdoptionApplication.Any(e => e.Id == id);
    }
}
