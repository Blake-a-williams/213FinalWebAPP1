@page "/adoptioncenters/details"
@using Microsoft.EntityFrameworkCore
@using Blazor213FinalWebAPP.Models
@inject IDbContextFactory<_213FinalWebAPP.Data._213FinalWebAPPContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>AdoptionCenter</h2>
    <hr />
    @if (adoptioncenter is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Message</dt>
            <dd class="col-sm-10">@adoptioncenter.Message</dd>
            <dt class="col-sm-2">SenderFName</dt>
            <dd class="col-sm-10">@adoptioncenter.SenderFName</dd>
            <dt class="col-sm-2">SenderLName</dt>
            <dd class="col-sm-10">@adoptioncenter.SenderLName</dd>
            <dt class="col-sm-2">MessageDesc</dt>
            <dd class="col-sm-10">@adoptioncenter.MessageDesc</dd>
            <dt class="col-sm-2">PhoneNumber</dt>
            <dd class="col-sm-10">@adoptioncenter.PhoneNumber</dd>
            <dt class="col-sm-2">Email</dt>
            <dd class="col-sm-10">@adoptioncenter.Email</dd>
        </dl>
        <div>
            <a href="@($"/adoptioncenters/edit?id={adoptioncenter.ID}")">Edit</a> |
            <a href="@($"/adoptioncenters")">Back to List</a>
        </div>
    }
</div>

@code {
    private AdoptionCenter? adoptioncenter;

    [SupplyParameterFromQuery]
    private int ID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        adoptioncenter = await context.AdoptionCenter.FirstOrDefaultAsync(m => m.ID == ID);

        if (adoptioncenter is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
